@mainpage Overview

[TOC]

[![build](https://github.com/TRIQS/mpi/workflows/build/badge.svg?branch=unstable)](https://github.com/TRIQS/mpi/actions?query=workflow%3Abuild)

> This is the homepage of **TRIQS/mpi @PROJECT_VERSION@**. The source code can be found on [GitHub](https://github.com/TRIQS/mpi).

```cpp
#include <mpi/mpi.hpp>
#include <iostream>

int main(int argc, char *argv[]) {
  // initialize MPI environment and communicator
  mpi::environment env(argc, argv);
  mpi::communicator world;

  // get rank of process
  int rank = world.rank();

  // perform a reduce operation
  int sum = mpi::reduce(rank, world);

  // output the result on root
  if (rank == 0) {
    std::cout << "The sum of all ranks is " << sum << "\n";
  }
}
```

**mpi** is a minimal C++ wrapper around the MPI C library and provides only a small subset of the functionality defined
in the MPI standard.

The main purpose of the library is to simplify the most common tasks like initializing/finalizing the MPI execution
environment or performing non-blocking collective communications.

For more advanced tasks, the user can always resort to the underlying MPI C-implementation.

@section start Where to start?

The @ref installation section tells you how to get the library and make it available on your system.

@ref integration explains how to integrate **mpi** in your own C++ code.

Then, you can start with the @ref examples section to get an overview of the library's features and how
it can simplify basic MPI tasks.

Furthermore, we provide a detailed reference @ref documentation to answer your questions.

If you experience any problem with the library, you can post an @ref issues "Issue" on GitHub.
